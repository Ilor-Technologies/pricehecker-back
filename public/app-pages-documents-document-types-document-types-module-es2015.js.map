{"version":3,"sources":["webpack:///./src/app/pages/documents/document-types/add-document-type/add-document-type.component.html","webpack:///./src/app/pages/documents/document-types/document-types.component.html","webpack:///./src/app/pages/documents/document-types/edit-document-type/edit-document-type.component.html","webpack:///./src/app/pages/documents/document-types/add-document-type/add-document-type.component.scss","webpack:///./src/app/pages/documents/document-types/add-document-type/add-document-type.component.ts","webpack:///./src/app/pages/documents/document-types/document-types.component.scss","webpack:///./src/app/pages/documents/document-types/document-types.component.ts","webpack:///./src/app/pages/documents/document-types/document-types.module.ts","webpack:///./src/app/pages/documents/document-types/edit-document-type/edit-document-type.component.scss","webpack:///./src/app/pages/documents/document-types/edit-document-type/edit-document-type.component.ts"],"names":[],"mappings":"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","file":"app-pages-documents-document-types-document-types-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-6  offset-lg-3 form-holder\\\">\\r\\n        <div class=\\\"card box-shadow border-0\\\">\\r\\n            <div class=\\\"card-block pt-3\\\">\\r\\n                <h3>Add New Document Type\\r\\n                    <button routerLink=\\\"/app/document-types\\\" class=\\\"btn btn-success pull-right\\\"><i\\r\\n                            class=\\\"fa fa-caret-left\\\"></i> Document Types\\r\\n                    </button>\\r\\n                </h3>\\r\\n                <hr>\\r\\n                <form class=\\\"form\\\" [formGroup]=\\\"NewTypeForm\\\" (ngSubmit)=\\\"onSubmit(NewTypeForm)\\\">\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Name<sup class=\\\"asterisk\\\">*</sup></label>\\r\\n                                <input formControlName=\\\"name\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\r\\n                                <div class=\\\"custom-alert\\\"\\r\\n                                     *ngIf=\\\"!NewTypeForm.controls['name'].valid && NewTypeForm.controls['name'].touched\\\">\\r\\n                                    Name is required\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Description<sup class=\\\"asterisk\\\">*</sup></label>\\r\\n                                <input formControlName=\\\"description\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\r\\n                                <div class=\\\"custom-alert\\\"\\r\\n                                     *ngIf=\\\"!NewTypeForm.controls['description'].valid && NewTypeForm.controls['description'].touched\\\">\\r\\n                                    Description is\\r\\n                                    required\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n\\r\\n                    </div>\\r\\n\\r\\n                    <!-- <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-md-12\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                          <label>Mime Type<sup class=\\\"asterisk\\\">*</sup></label>\\r\\n                          <input formControlName=\\\"mime_type\\\" displayType=\\\"text\\\" class=\\\"form-control\\\">\\r\\n                          <div class=\\\"custom-alert\\\"\\r\\n                               *ngIf=\\\"!NewFormatForm.controls['mime_type'].valid && NewFormatForm.controls['mime_type'].touched\\\">\\r\\n                            Extension is\\r\\n                            required\\r\\n                          </div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n\\r\\n                    </div> -->\\r\\n                    <button [disabled]=\\\"!NewTypeForm.valid || loading\\\"\\r\\n                            class=\\\"btn btn-success pull-right submit-btn my-3\\\">\\r\\n                        <app-small-loader *ngIf=\\\"loading\\\"></app-small-loader>{{loading ? '' : 'Add Document Type'}}\\r\\n                    </button>\\r\\n                </form>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"<app-loader *ngIf=\\\"loading == true\\\"></app-loader>\\r\\n<div class=\\\"container-fluid\\\" *ngIf=\\\"loading == false\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-10 offset-md-1\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <div class=\\\"input-group box-shadow\\\">\\r\\n                    <a class=\\\"btn btn-success mr-2\\\" routerLink=\\\"/app/document-types/create\\\">\\r\\n                        <i class=\\\"fa fa-plus\\\"></i> Create Document Type </a>\\r\\n                    <div class=\\\"input-group-addon border-top-0 border-left-0 border-bottom-0 rounded-0 search-icon\\\"><i\\r\\n                            class=\\\"fa fa-search\\\"></i></div>\\r\\n                    <input #filterField type=\\\"text\\\"\\r\\n                           placeholder=\\\"Search Document Types\\\"\\r\\n                           class=\\\"form-control border-0\\\">\\r\\n                    <a class=\\\"btn btn-success\\\" (click)=\\\"getDocTypes(filterField.value)\\\"\\r\\n                       routerLink=\\\"/app/document-types/create\\\">\\r\\n                        Search</a>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <br>\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <!-- <h5 *ngIf=\\\"placeHolderMessage\\\" class=\\\"col-md-12 pt-2 pb-2 text-success\\\">{{placeHolderMessage}}</h5>\\r\\n            <h5 *ngIf=\\\"errorMessage\\\" class=\\\"col-md-12 pt-2 pb-2 text-danger\\\">{{errorMessage}}</h5> -->\\r\\n\\r\\n            <div class=\\\"table-responsive bg-white box-shadow\\\">\\r\\n                <table class=\\\"table table-hover\\\">\\r\\n\\r\\n                    <thead>\\r\\n                    <tr>\\r\\n                        <!-- <th><input displayType=\\\"checkbox\\\" name=\\\"all\\\" [checked]=\\\"isAllChecked()\\\" (change)=\\\"checkAll($event)\\\" [(ngModel)]=\\\"checked\\\"/></th> -->\\r\\n                        <th><input [checked]=\\\"isAllChecked\\\" (change)=\\\"checkAll()\\\" type=\\\"checkbox\\\"></th>\\r\\n                        <th>Name</th>\\r\\n                        <th>Description</th>\\r\\n                        <th>Created At</th>\\r\\n                        <th>Updated At</th>\\r\\n                        <th></th>\\r\\n                    </tr>\\r\\n                    </thead>\\r\\n\\r\\n                    <tr *ngFor=\\\"let doctype of doc_types\\\">\\r\\n                        <td><input [checked]=\\\"doctype.selected\\\" type=\\\"checkbox\\\"></td>\\r\\n                        <td>{{doctype.name}}</td>\\r\\n                        <td>{{doctype.description}}</td>\\r\\n                        <td>{{doctype.created_at}}</td>\\r\\n                        <td>{{doctype.updated_at}}</td>\\r\\n                        <td class=\\\"align-middle\\\">\\r\\n                            <div class=\\\"btn-group\\\" role=\\\"group\\\">\\r\\n\\r\\n                                <a routerLink=\\\"/app/document-types/edit/{{doctype.id}}\\\" class=\\\"btn btn-secondary btn-sm\\\"><i\\r\\n                                        class=\\\"fa fa-tasks\\\"></i>&nbsp;Edit</a>\\r\\n                                <button (click)=\\\"deleteDocType(doctype.id)\\\" class=\\\"btn btn-danger btn-sm text-center\\\"><i\\r\\n                                        class=\\\"fa fa-trash\\\"></i>&nbsp;Delete\\r\\n                                </button>\\r\\n                            </div>\\r\\n                        </td>\\r\\n                    </tr>\\r\\n\\r\\n                </table>\\r\\n\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"<app-loader *ngIf=\\\"pageLoading\\\"></app-loader>\\r\\n<div class=\\\"container-fluid\\\" *ngIf=\\\"!pageLoading\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <a class=\\\"btn btn-success offset-lg-10\\\" routerLink=\\\"/app/document-types\\\"> <i\\r\\n                    class=\\\"fa fa-chevron-left \\\"></i> Document Types </a>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<br>\\r\\n\\r\\n<div class=\\\"row\\\" *ngIf=\\\"!pageLoading\\\">\\r\\n    <div class=\\\"col-lg-4 profile-info box-shadow offset-lg-1\\\">\\r\\n        <h3>DOCUMENT TYPE INFORMATION\\r\\n\\r\\n        </h3>\\r\\n        <div class=\\\"card\\\">\\r\\n            <div class=\\\"card-block pt-3\\\">\\r\\n\\r\\n                <br>\\r\\n                <div class=\\\"\\\">\\r\\n                    <div class=\\\"media-body ml-12\\\">\\r\\n\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <h6 class=\\\"col-4 text-black pr-0\\\">Name:</h6>\\r\\n                            <h6 class=\\\"col-8 pl-2\\\">{{doc_type.name}} </h6>\\r\\n                            <h6 class=\\\"col-4 text-black pr-0\\\">Description:</h6>\\r\\n                            <h6 class=\\\"col-8 pl-2\\\">{{doc_type.description}}</h6>\\r\\n\\r\\n                            <div class=\\\"col-md-10 offset-md-1 action-box mt-3\\\">\\r\\n\\r\\n                                <button class=\\\"btn btn btn-danger\\\" (click)=\\\"onDelete($event)\\\">Delete Record</button>\\r\\n\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-lg-6 box-shadow form-holder\\\">\\r\\n        <div class=\\\"card border-0\\\">\\r\\n            <div class=\\\"card-block pt-3\\\">\\r\\n                <h3>{{doc_type.name}}</h3>\\r\\n                <hr>\\r\\n                <form class=\\\"form\\\" [formGroup]=\\\"TypeForm\\\" (ngSubmit)=\\\"onSubmit(TypeForm)\\\" novalidate>\\r\\n\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Name<sup class=\\\"asterisk\\\">*</sup></label>\\r\\n                                <input type=\\\"text\\\" value=\\\"{{doc_type.name}}\\\" class=\\\"form-control\\\"\\r\\n                                       formControlName=\\\"name\\\">\\r\\n                                <div class=\\\"custom-alert\\\"\\r\\n                                     *ngIf=\\\"!TypeForm.controls['name'].valid && TypeForm.controls['name'].touched\\\">\\r\\n                                    The Name is Required\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-12\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label>Description<sup class=\\\"asterisk\\\">*</sup></label>\\r\\n                                <input type=\\\"text\\\" value=\\\"{{doc_type.description}}\\\" class=\\\"form-control\\\"\\r\\n                                       formControlName=\\\"description\\\">\\r\\n                                <div class=\\\"custom-alert\\\"\\r\\n                                     *ngIf=\\\"!TypeForm.controls['description'].valid && TypeForm.controls['description'].touched\\\">\\r\\n                                    The Description is Required\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n\\r\\n                    <!-- <div class=\\\"row\\\">\\r\\n                      <div class=\\\"col-md-12\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                          <label>Mime Type<sup class=\\\"asterisk\\\">*</sup></label>\\r\\n                          <input displayType=\\\"text\\\" value=\\\"{{doc_format.mime_type}}\\\"  class=\\\"form-control\\\"  formControlName=\\\"mime_type\\\">\\r\\n                          <div class=\\\"custom-alert\\\"\\r\\n                               *ngIf=\\\"!FormatForm.controls['mime_type'].valid && FormatForm.controls['mime_type'].touched\\\">\\r\\n                          The Mime Type is Required</div>\\r\\n                        </div>\\r\\n                      </div>\\r\\n                    </div>\\r\\n           -->\\r\\n                    <button [disabled]=\\\"loading\\\" class=\\\"btn btn-block submit-btn my-3\\\">\\r\\n                        <app-small-loader *ngIf=\\\"loading\\\"></app-small-loader>{{loading ? '' : 'Update Document Type'}}\\r\\n                    </button>\\r\\n                </form>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2RvY3VtZW50cy9kb2N1bWVudC10eXBlcy9hZGQtZG9jdW1lbnQtdHlwZS9hZGQtZG9jdW1lbnQtdHlwZS5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, ElementRef, OnInit, ViewEncapsulation} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {DocumentTypeService} from '../../../../services/document-types.service';\r\nimport {Constants} from '../../../../app.constants';\r\n\r\n@Component({\r\n    selector: 'app-add-document-type',\r\n    templateUrl: './add-document-type.component.html',\r\n    styleUrls: ['./add-document-type.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class AddDocumentTypeComponent implements OnInit {\r\n    public NewTypeForm: FormGroup;\r\n    errorMessage: any[];\r\n    loading: boolean;\r\n\r\n    constructor(private formBuilder: FormBuilder,\r\n                private router: Router,\r\n                private route: ActivatedRoute,\r\n                private documentTypeService: DocumentTypeService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.buildForm();\r\n    }\r\n\r\n    buildForm() {\r\n        this.NewTypeForm = this.formBuilder.group({\r\n            name: ['', Validators.compose([Validators.required, Validators.maxLength(255)])],\r\n            description: ['', Validators.compose([Validators.required, Validators.maxLength(255)])],\r\n            allowed: [0],\r\n        });\r\n    }\r\n\r\n    onSubmit({value, valid}: { value: DocumentType, valid: boolean }) {\r\n        if (value) {\r\n            this.loading = true;\r\n            this.documentTypeService.addDocType(value).subscribe((document_type: DocumentType) => {\r\n                if (document_type) {\r\n                    this.router.navigate(['/app/document-types'])\r\n                }\r\n                this.loading = false;\r\n            }, (err) => {\r\n                Constants.handleError(err, this.router, true);\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2RvY3VtZW50cy9kb2N1bWVudC10eXBlcy9kb2N1bWVudC10eXBlcy5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {Location} from '@angular/common';\r\nimport {Constants} from '../../../app.constants';\r\nimport {DocumentTypeService} from '../../../services/document-types.service';\r\nimport Swal from 'sweetalert2';\r\nimport {FormArray, FormControl} from '@angular/forms';\r\nimport {DocumentType} from '../../../interfaces/interfaces';\r\n\r\n@Component({\r\n    selector: 'app-document-types',\r\n    templateUrl: './document-types.component.html',\r\n    styleUrls: ['./document-types.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class DocumentTypesComponent implements OnInit {\r\n    public doc_types: DocumentType[] = [];\r\n    toggle = false;\r\n    loading: boolean;\r\n    errorMessage: any;\r\n\r\n    constructor(public documentTypeService: DocumentTypeService,\r\n                private route: ActivatedRoute, private _Location: Location,\r\n                private router: Router) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.getDocTypes('');\r\n    }\r\n\r\n    checkAll(ev) {\r\n        this.doc_types.forEach(x => x.selected = ev.target.checked)\r\n    }\r\n\r\n    get isAllChecked() {\r\n        return this.doc_types.every(_ => _.selected);\r\n    }\r\n\r\n    get hasSomeChecked() {\r\n        return this.doc_types.find(e => e.selected);\r\n    }\r\n\r\n    public getDocTypes(filter): void {\r\n        this.loading = true;\r\n        this.doc_types = [];\r\n        this.documentTypeService.getDocumentTypes(filter).subscribe((doc_types: DocumentType[]) => {\r\n                this.doc_types = doc_types;\r\n                this.loading = false;\r\n            }, (err) => {\r\n                this.errorMessage = Constants.handleError(err, this.router);\r\n                this.loading = false;\r\n            }\r\n        );\r\n    }\r\n\r\n    deleteDocType(id) {\r\n\r\n        Swal.fire({\r\n            title: 'Confirm delete',\r\n            text: 'Do you want to delete the selected record?',\r\n            type: 'question',\r\n            cancelButtonText: 'Cancel',\r\n            showCancelButton: true,\r\n            confirmButtonText: 'Yes Delete',\r\n            showConfirmButton: true\r\n        }).then(willDelete => {\r\n            if (willDelete.value) {\r\n                this.documentTypeService.deleteDocumentType(id).subscribe((status: boolean) => {\r\n                    if (status) {\r\n                        Constants.succeeded('Document Type has been deleted!')\r\n                        window.setTimeout(function () {\r\n                            location.reload();\r\n                        }, 2000)\r\n                    } else {\r\n                        Constants.error('Unable to delete Document Type');\r\n                    }\r\n                }, (err) => {\r\n                    Constants.handleError(err, this.router, true);\r\n                });\r\n            }\r\n        })\r\n    }\r\n\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {RouterModule} from '@angular/router';\r\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\r\nimport {LoaderModule} from '../../../shared/loader/loader.module';\r\nimport {CustomErrorModule} from '../../../shared/custom-error/custom-error.module';\r\nimport {DocumentTypesComponent} from './document-types.component';\r\nimport {AddDocumentTypeComponent} from './add-document-type/add-document-type.component';\r\nimport {EditDocumentTypeComponent} from './edit-document-type/edit-document-type.component';\r\n\r\nexport const routes = [\r\n    {path: '', component: DocumentTypesComponent},\r\n    {path: 'create', component: AddDocumentTypeComponent},\r\n    {path: 'edit/:id', component: EditDocumentTypeComponent},\r\n];\r\n\r\n@NgModule({\r\n    declarations: [\r\n        DocumentTypesComponent, AddDocumentTypeComponent, EditDocumentTypeComponent\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule.forChild(routes),\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        LoaderModule,\r\n        CustomErrorModule\r\n    ]\r\n})\r\nexport class DocumentTypesModule {\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2RvY3VtZW50cy9kb2N1bWVudC10eXBlcy9lZGl0LWRvY3VtZW50LXR5cGUvZWRpdC1kb2N1bWVudC10eXBlLmNvbXBvbmVudC5zY3NzIn0= */\"","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {DocumentTypeService} from '../../../../services/document-types.service';\r\nimport {Constants} from '../../../../app.constants';\r\nimport {DocumentType} from '../../../../interfaces/interfaces';\r\n\r\n@Component({\r\n    selector: 'app-edit-document-type',\r\n    templateUrl: './edit-document-type.component.html',\r\n    styleUrls: ['./edit-document-type.component.scss'],\r\n    encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class EditDocumentTypeComponent implements OnInit {\r\n    public TypeForm: FormGroup;\r\n    doc_type: DocumentType = {\r\n        name: '',\r\n        description: '',\r\n    }\r\n    doc_types: DocumentType[] = [];\r\n    errorMessage: any;\r\n    loading: boolean;\r\n    pageLoading: boolean;\r\n    onSuccess: any;\r\n    deleteMessageEnabled: boolean;\r\n\r\n    constructor(\r\n        private formBuilder: FormBuilder,\r\n        private router: Router,\r\n        private route: ActivatedRoute,\r\n        private documentTypeService: DocumentTypeService,\r\n    ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.buildForm();\r\n        const id = this.route.snapshot.params['id'];\r\n        this.getDocumentType(id);\r\n    }\r\n\r\n    buildForm() {\r\n        this.TypeForm = this.formBuilder.group({\r\n            name: ['', Validators.compose([Validators.required, Validators.maxLength(255)])],\r\n            description: ['', Validators.compose([Validators.required, Validators.maxLength(255)])],\r\n        });\r\n    }\r\n\r\n    getDocumentType(id: number) {\r\n        this.pageLoading = true\r\n        this.documentTypeService.getDocumentTypeByID(id).subscribe((doc_type: DocumentType) => {\r\n                this.doc_type = doc_type;\r\n                this.TypeForm.patchValue({\r\n                    name: this.doc_type.name,\r\n                    description: this.doc_type.description,\r\n                });\r\n                this.pageLoading = false;\r\n            }, (err) => {\r\n                this.errorMessage = Constants.handleError(err, this.router, true);\r\n                this.pageLoading = false;\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    onSubmit({value, valid}: { value: DocumentType, valid: boolean }) {\r\n        value.id = this.doc_type.id;\r\n        this.loading = true;\r\n        if (value.id) {\r\n            this.documentTypeService.updateDocumentType(value)\r\n                .subscribe((doc_type: DocumentType) => {\r\n                        if (this.doc_type) {\r\n                            this.onSuccess = 'Document Type successfully updated'\r\n                        }\r\n                    },\r\n                    (err) => {\r\n                        this.errorMessage = <any>err.Staus;\r\n                    },\r\n                    () => {\r\n                        this.loading = false;\r\n                    }\r\n                )\r\n        }\r\n    }\r\n\r\n    onDelete(event: Event) {\r\n        event.preventDefault();\r\n        this.documentTypeService.deleteDocumentType(this.doc_type.id)\r\n            .subscribe((status: boolean) => {\r\n                    if (status) {\r\n                        this.router.navigate(['/app/document-types']);\r\n                    } else {\r\n                        Constants.error('Unable to delete Document Type');\r\n                    }\r\n                },\r\n                (err) => {\r\n                    Constants.handleError(err, this.router, true);\r\n                }\r\n            )\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}